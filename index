<!-- Comienza el código del minijuego "Camino de la Claridad" -->
<div id="gameContainer" style="position: relative; width: 100%; max-width: 800px; height: 600px; margin: auto; font-family: 'Lato', sans-serif;">
    
    <!-- Estilos del Juego (CSS) -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lato:wght@300;400&display=swap');
        
        #gameCanvas-blogger {
            background: radial-gradient(circle, #4a5568 0%, #1a202c 70%);
            cursor: pointer;
            display: block;
            width: 100%;
            height: 100%;
        }
        .game-ui-blogger {
            font-family: 'Lato', sans-serif;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
            color: white;
            position: absolute;
            z-index: 10;
        }
        .vignette-blogger {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            box-shadow: inset 0 0 150px rgba(0,0,0,0.5);
            pointer-events: none;
        }
        .menu-overlay-blogger {
             position: absolute;
             inset: 0;
             background-color: rgba(0,0,0,0.7);
             display: flex;
             flex-direction: column;
             align-items: center;
             justify-content: center;
             text-align: center;
             z-index: 20;
             padding: 1rem;
             color: white;
        }
        .menu-overlay-blogger h1 {
            font-family: 'Playfair Display', serif;
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #f6e05e; /* amber-300 */
        }
        .menu-overlay-blogger p {
            font-size: 1.125rem;
            max-width: 500px;
            margin-bottom: 2rem;
        }
        .menu-overlay-blogger button {
            background-color: #f6ad55; /* amber-400 */
            color: #1a202c; /* gray-900 */
            font-weight: bold;
            padding: 0.75rem 2rem;
            border-radius: 9999px;
            font-size: 1.25rem;
            transition: transform 0.2s;
            border: none;
            cursor: pointer;
        }
        .menu-overlay-blogger button:hover {
            transform: scale(1.05);
        }
        .hidden-blogger {
            display: none;
        }

    </style>

    <!-- Elementos de la Interfaz del Juego (HTML) -->
    <div class="game-ui-blogger" style="top: 1.25rem; left: 1.25rem; font-size: 1.125rem;">
        <p>Puntuación: <span id="score-blogger">0</span></p>
    </div>
    <div class="game-ui-blogger" style="top: 1.25rem; right: 1.25rem; font-size: 1.125rem;">
        <p>Vida: <span id="health-bar-blogger">❤️❤️❤️</span></p>
    </div>

    <!-- Menú de Inicio -->
    <div id="startMenu-blogger" class="menu-overlay-blogger">
        <h1>Camino de la Claridad</h1>
        <p>Protege tu luz interior de las sombras de la duda y la distracción. Haz clic en las sombras para disiparlas. Mantén tu llama brillante y tu camino despejado.</p>
        <button id="startButton-blogger">Comenzar</button>
    </div>

    <!-- Menú de Fin de Juego -->
    <div id="gameOverMenu-blogger" class="menu-overlay-blogger hidden-blogger">
        <h1 style="color: #f56565;">La Llama se Extinguió</h1>
        <p style="font-size: 1.25rem; margin-bottom: 0.5rem;">Tu puntuación final es:</p>
        <p id="finalScore-blogger" style="font-size: 2.25rem; font-weight: bold; margin-bottom: 2rem; color: #f6e05e;"></p>
        <button id="restartButton-blogger">Intentar de Nuevo</button>
    </div>
    
    <canvas id="gameCanvas-blogger"></canvas>
    <div class="vignette-blogger"></div>
</div>

<!-- Lógica del Juego (JavaScript) -->
<script>
    (function() {
        // --- DOM Elements ---
        const canvas = document.getElementById('gameCanvas-blogger');
        const ctx = canvas.getContext('2d');
        const scoreEl = document.getElementById('score-blogger');
        const healthBarEl = document.getElementById('health-bar-blogger');
        const startMenu = document.getElementById('startMenu-blogger');
        const gameOverMenu = document.getElementById('gameOverMenu-blogger');
        const startButton = document.getElementById('startButton-blogger');
        const restartButton = document.getElementById('restartButton-blogger');
        const finalScoreEl = document.getElementById('finalScore-blogger');
        
        // --- Game Configuration ---
        let score = 0;
        let health = 3;
        let gameActive = false;
        let animationFrameId;
        
        let shadows = [];
        let particles = [];
        const flame = { x: 0, y: 0, size: 50, baseSize: 50 };
        
        // --- Utility Functions ---
        function resizeCanvas() {
            const container = document.getElementById('gameContainer');
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
            flame.x = canvas.width / 2;
            flame.y = canvas.height / 2;
        }

        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // --- Game Object Classes ---
        class Shadow {
            constructor() {
                const edge = Math.floor(random(0, 4));
                if (edge === 0) { this.x = random(0, canvas.width); this.y = -30; } 
                else if (edge === 1) { this.x = canvas.width + 30; this.y = random(0, canvas.height); } 
                else if (edge === 2) { this.x = random(0, canvas.width); this.y = canvas.height + 30; } 
                else { this.x = -30; this.y = random(0, canvas.height); }
                
                this.size = random(20, 40);
                this.speed = random(0.5, 1.5) * (1 + score / 5000);
                this.angle = Math.atan2(flame.y - this.y, flame.x - this.x);
            }

            update() {
                this.x += Math.cos(this.angle) * this.speed;
                this.y += Math.sin(this.angle) * this.speed;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                const gradient = ctx.createRadialGradient(this.x, this.y, this.size * 0.1, this.x, this.y, this.size);
                gradient.addColorStop(0, 'rgba(30, 30, 40, 0.9)');
                gradient.addColorStop(1, 'rgba(10, 10, 20, 0)');
                ctx.fillStyle = gradient;
                ctx.fill();
            }
        }

        class Particle {
            constructor(x, y) {
                this.x = x; this.y = y;
                this.size = random(2, 5);
                this.speedX = random(-2, 2);
                this.speedY = random(-2, 2);
                this.life = 1;
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                this.life -= 0.03;
            }

            draw() {
                ctx.fillStyle = `rgba(255, 220, 150, ${Math.max(0, this.life)})`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        // --- Game Logic ---
        function spawnShadow() {
            if (gameActive) {
                shadows.push(new Shadow());
                const spawnRate = Math.max(200, 1500 - score / 10);
                setTimeout(spawnShadow, spawnRate);
            }
        }

        function drawFlame() {
            const pulse = Math.sin(Date.now() * 0.005) * 5;
            flame.size = flame.baseSize + pulse;

            const gradient = ctx.createRadialGradient(flame.x, flame.y, flame.size * 0.2, flame.x, flame.y, flame.size);
            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
            gradient.addColorStop(0.2, 'rgba(255, 200, 0, 0.8)');
            gradient.addColorStop(1, 'rgba(255, 100, 0, 0)');
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(flame.x, flame.y, flame.size, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.font = `${flame.size * 0.8}px serif`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText('🔥', flame.x, flame.y);
        }
        
        function updateUI() {
            scoreEl.textContent = score;
            healthBarEl.textContent = '❤️'.repeat(Math.max(0, health));
        }

        function takeDamage() {
            health--;
            flame.baseSize = Math.max(20, flame.baseSize - 10);
            updateUI();
            
            canvas.style.transform = `translate(${random(-5, 5)}px, ${random(-5, 5)}px)`;
            setTimeout(() => canvas.style.transform = '', 100);

            if (health <= 0) endGame();
        }

        function handleClick(e) {
            if (!gameActive) return;
            const rect = canvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickY = e.clientY - rect.top;

            for (let i = shadows.length - 1; i >= 0; i--) {
                const s = shadows[i];
                const distance = Math.sqrt((clickX - s.x)**2 + (clickY - s.y)**2);
                if (distance < s.size) {
                    for (let j = 0; j < 15; j++) particles.push(new Particle(s.x, s.y));
                    shadows.splice(i, 1);
                    score += 100;
                    updateUI();
                    break;
                }
            }
        }

        function gameLoop() {
            if (!gameActive) return;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawFlame();
            particles.forEach((p, index) => {
                p.update(); p.draw();
                if (p.life <= 0) particles.splice(index, 1);
            });
            shadows.forEach((s, index) => {
                s.update(); s.draw();
                const distance = Math.sqrt((s.x - flame.x)**2 + (s.y - flame.y)**2);
                if (distance < s.size + flame.size / 2) {
                    shadows.splice(index, 1);
                    takeDamage();
                }
            });
            score++;
            updateUI();
            animationFrameId = requestAnimationFrame(gameLoop);
        }

        function startGame() {
            score = 0; health = 3;
            shadows = []; particles = [];
            flame.baseSize = 50;
            gameActive = true;
            startMenu.classList.add('hidden-blogger');
            gameOverMenu.classList.add('hidden-blogger');
            updateUI();
            gameLoop();
            spawnShadow();
        }

        function endGame() {
            gameActive = false;
            cancelAnimationFrame(animationFrameId);
            finalScoreEl.textContent = score;
            gameOverMenu.classList.remove('hidden-blogger');
        }

        // --- Event Listeners ---
        window.addEventListener('resize', resizeCanvas);
        canvas.addEventListener('click', handleClick);
        startButton.addEventListener('click', startGame);
        restartButton.addEventListener('click', startGame);
        
        // --- Initial setup ---
        resizeCanvas();
    })();
</script>
<!-- Fin del código del minijuego -->
